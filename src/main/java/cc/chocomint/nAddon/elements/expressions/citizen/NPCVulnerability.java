package cc.chocomint.nAddon.elements.expressions.citizen;

import javax.annotation.Nullable;

import org.bukkit.event.Event;

import cc.chocomint.nAddon.Main;
import ch.njol.skript.Skript;
import ch.njol.skript.classes.Changer;
import ch.njol.skript.lang.Expression;
import ch.njol.skript.lang.ExpressionType;
import ch.njol.skript.lang.SkriptParser.ParseResult;
import ch.njol.skript.lang.util.SimpleExpression;
import ch.njol.util.Kleenean;
import ch.njol.util.coll.CollectionUtils;
import net.citizensnpcs.api.npc.NPC;

public class NPCVulnerability extends SimpleExpression<Boolean> {
	
	private Expression<NPC> ex_npc;
	
	static {
		if(Main.getPlugin().getConfig().getBoolean("citizen") == true) {
			Skript.registerExpression(NPCVulnerability.class, Boolean.class, ExpressionType.COMBINED, "%npc%'s vulnerability");
			Skript.registerExpression(NPCVulnerability.class, Boolean.class, ExpressionType.COMBINED, "vulnerability of %npc%");
			Main.Expressions ++;
		}
	}

	@Override
	public boolean isSingle() {
		return true;
	}

	@Override
	public Class<? extends Boolean> getReturnType() {
		return Boolean.class;
	}

	@SuppressWarnings("unchecked")
	@Override
	public boolean init(Expression<?>[] exprs, int matchedPattern, Kleenean isDelayed, ParseResult parseResult) {
		this.ex_npc = (Expression<NPC>) exprs[0];
		return true;
	}

	@Override
	public String toString(@Nullable Event e, boolean debug) {
		return "NPCVulnerability";
	}

	@Override
	protected @Nullable Boolean[] get(Event e) {
		NPC npc = (NPC) ex_npc.getSingle(e);
		Boolean vulnerability = npc.isProtected();
		return new Boolean[] {vulnerability};
	}
	
	@Override
	public void change(Event e, Object[] delta, Changer.ChangeMode mode) {
		switch (mode) {
			case SET:
				Boolean changeTo = (Boolean) delta[0];
				NPC npc = (NPC) ex_npc.getSingle(e);
				npc.setProtected(changeTo);
				break;
			default:
				break;
		}
	}
	
	@Override
	public Class<?>[] acceptChange(Changer.ChangeMode mode) {
		switch (mode) {
			case SET:
				return (Class[]) CollectionUtils.array((Object[]) new Class[] {Boolean.class});
			default:
				return null;
		}
	}

}
